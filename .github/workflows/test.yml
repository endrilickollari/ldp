name: Run Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual trigger

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          tesseract-ocr \
          tesseract-ocr-eng \
          libtesseract-dev \
          poppler-utils \
          libgl1-mesa-glx \
          libglib2.0-0 \
          libsm6 \
          libxext6 \
          libxrender-dev \
          libgomp1

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flower
        pip install pytest-cov pytest-html pytest-xdist

    - name: Set up test environment
      run: |
        # Create necessary directories
        mkdir -p uploads logs
        
        # Initialize test database
        python init_db.py
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Run tests with coverage
      run: |
        python -m pytest tests/ \
          --verbose \
          --tb=short \
          --cov=app \
          --cov=workers \
          --cov-report=term-missing \
          --cov-report=html:htmlcov \
          --cov-report=xml:coverage.xml \
          --html=test-report.html \
          --self-contained-html \
          --junit-xml=test-results.xml
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-report.html
          test-results.xml
          htmlcov/
        retention-days: 30

    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/
        retention-days: 30

    - name: Test Summary
      if: always()
      run: |
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "Python Version: ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
        echo "Exit Code: $?" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "test-results.xml" ]; then
          echo "Test results file created successfully" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "coverage.xml" ]; then
          echo "Coverage report generated" >> $GITHUB_STEP_SUMMARY
        fi

  test-docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t ldp-app:test .

    - name: Test Docker container
      run: |
        # Start the container in background
        docker run -d --name ldp-test -p 8000:8000 ldp-app:test
        
        # Wait for the container to start
        sleep 10
        
        # Test if the API is responding
        curl -f http://localhost:8000/docs || exit 1
        
        # Stop and remove the container
        docker stop ldp-test
        docker rm ldp-test

    - name: Clean up Docker resources
      if: always()
      run: |
        docker system prune -f
