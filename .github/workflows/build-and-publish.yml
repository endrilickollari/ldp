name: Build and Publish App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch: # Allow manual trigger

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          tesseract-ocr \
          tesseract-ocr-eng \
          libtesseract-dev \
          poppler-utils \
          libgl1-mesa-dev \
          libglib2.0-0 \
          libsm6 \
          libxext6 \
          libxrender-dev \
          libgomp1

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flower  # Additional dependency for monitoring
        pip install pytest pytest-cov pytest-html pytest-xdist httpx
        pip install pytest-asyncio pytest-mock

    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Create build directory
      run: |
        mkdir -p build/ldp-app
        
    - name: Copy application files
      run: |
        # Copy main application files
        cp -r app/ build/ldp-app/
        cp -r workers/ build/ldp-app/
        cp -r tests/ build/ldp-app/
        
        # Copy configuration files
        cp requirements.txt build/ldp-app/
        cp Dockerfile build/ldp-app/
        cp docker-compose.yml build/ldp-app/
        cp pytest.ini build/ldp-app/
        cp README.md build/ldp-app/
        cp init_db.py build/ldp-app/
        cp migrate_db.py build/ldp-app/
        cp run_tests.py build/ldp-app/
        
        # Copy docker script if it exists
        if [ -f docker.sh ]; then
          cp docker.sh build/ldp-app/
        fi
        
        # Create startup script
        cat > build/ldp-app/start.sh << 'EOF'
        #!/bin/bash
        # Large Document Processing API Startup Script
        
        echo "Starting Large Document Processing API..."
        
        # Check if virtual environment exists, create if not
        if [ ! -d "venv" ]; then
            echo "Creating virtual environment..."
            python -m venv venv
        fi
        
        # Activate virtual environment
        source venv/bin/activate
        
        # Install dependencies
        echo "Installing dependencies..."
        pip install -r requirements.txt
        pip install flower
        
        # Initialize database if needed
        if [ -f "init_db.py" ]; then
            echo "Initializing database..."
            python init_db.py
        fi
        
        # Run database migrations if needed
        if [ -f "migrate_db.py" ]; then
            echo "Running database migrations..."
            python migrate_db.py
        fi
        
        # Start the application
        echo "Starting FastAPI application on http://localhost:8000"
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
        EOF
        
        # Make startup script executable
        chmod +x build/ldp-app/start.sh
        
        # Create README for the build
        cat > build/ldp-app/BUILD_README.md << 'EOF'
        # Large Document Processing API - Build
        
        This is a pre-built version of the Large Document Processing API.
        
        ## Quick Start
        
        ### Using the startup script (Recommended)
        ./start.sh
        
        ### Manual setup
        1. Create a virtual environment:
           python -m venv venv
           source venv/bin/activate
        
        2. Install dependencies:
           pip install -r requirements.txt
           pip install flower
        
        3. Initialize the database:
           python init_db.py
        
        4. Run the application:
           uvicorn app.main:app --host 0.0.0.0 --port 8000
        
        ### Using Docker
        docker build -t ldp-app .
        docker run -p 8000:8000 ldp-app
        
        ### Using Docker Compose
        docker-compose up
        
        ## API Documentation
        Once running, visit http://localhost:8000/docs for the interactive API documentation.
        
        ## Testing
        Run tests with: python -m pytest tests/ -v
        Or use the test runner: python run_tests.py
        
        ## Build Information
        See BUILD_INFO.txt for detailed build information.
        EOF

    - name: Set build metadata
      run: |
        echo "Build Date: $(date)" > build/ldp-app/BUILD_INFO.txt
        echo "Python Version: $(python --version)" >> build/ldp-app/BUILD_INFO.txt
        echo "Git Commit: ${GITHUB_SHA}" >> build/ldp-app/BUILD_INFO.txt
        echo "Git Ref: ${GITHUB_REF}" >> build/ldp-app/BUILD_INFO.txt
        echo "Workflow Run: ${GITHUB_RUN_NUMBER}" >> build/ldp-app/BUILD_INFO.txt

    - name: Create deployment zip
      run: |
        cd build
        zip -r ldp-app-${{ github.run_number }}.zip ldp-app/
        
        # Also create a latest version for main branch
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          cp ldp-app-${{ github.run_number }}.zip ldp-app-latest.zip
        fi

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ldp-app-build-${{ github.run_number }}
        path: build/ldp-app-${{ github.run_number }}.zip
        retention-days: 30

    - name: Upload latest build (main branch only)
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: ldp-app-latest
        path: build/ldp-app-latest.zip
        retention-days: 90

    - name: Create Release Asset (on release)
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v2
      with:
        files: build/ldp-app-${{ github.run_number }}.zip
        name: ldp-app-${{ github.event.release.tag_name }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-build:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
